@page "/Events"
@model EventHorizon.Pages.EventPages.EventsModel

<div >
    @if (Model.Events == null || Model.Events.Count < 1)
    {
    <div class="row justify-content-center">
        <h3>There are currently no events scheduled.</h3>

    </div>
    }
    else
    {
        <div id="accordion" class="row justify-content-center">
            @for (int i = 0; i < Model.Events.Count; i++)
            {
            <div class="card" style="width: 40rem;">
                <div class="card-header" id="heading@(i)">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapse@(i)" aria-expanded="true" aria-controls="collapse@(i)">
                        Event: @Html.DisplayFor(model => model.Events[i].Title)
                    </button>
                    @* asp-page pekar på sidan, asp-route-id skickar med id-parameter. Kollar man på Details-sidan,
                        ser man i codebehind OnGetAsync att ID tas emot,
                        och skickas mot databasen och så vidare*@
                    <a class="btn btn-primary text-white float-right" asp-page="Details" asp-route-id="@Model.Events[i].Id">Join event</a>
                </div>
                <div id="collapse@(i)" class="collapse @(i==0?"show":"")" aria-labelledby="heading@(i)" data-parent="#accordion">
                    <div class="card-body">
                        @{
                            var base64 = Convert.ToBase64String(Model.Events[i]?.EventImage);
                            var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                        }
                        @if (!string.IsNullOrEmpty(imgSrc))
                        {
                            @*asp-append-version; suffix:ar ett random-parameter-tal  till souce-url:en för bilden;
                              Problemet det löser är att webbrowsers gärna caches per URL, så uppdaterar man bilden
                              på servern, kommer inte en ny laddas av browsern för den har samma source, således "finns redan".
                              Genom att random-talet append:as, kommer broswern se detta som en ny image och ladda ner den.*@
                            <img asp-append-version="true" src="@imgSrc" class="card-img-bottom rounded mb-2" alt="Card image cap">
                        }
                        @Html.DisplayFor(model => model.Events[i].Description)
                    </div>
                </div>
            </div>
            }
        </div>
    }
</div>
